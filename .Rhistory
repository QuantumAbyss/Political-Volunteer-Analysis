install.packages(c("dplyr", "data.table", "lubridate", "readr", "ggplot2", "shiny", "tidyr", "broom"))
shiny::runApp('MV Software')
runApp('MV Software')
runApp('MV Software')
runApp('MV Software')
runApp('MV Software')
runApp('MV Software')
?rnorm
dat.seq <- seq.Date(ymd_hms("2019-01-01 00:00:00"), ymd_hms("2019-12-31 23:00:00"), by = "hour")
#'
#' Develops fake CVR data for input into CVR software
#'
### Libraries -------------------------------------------------------------------------------------
.x <- c("dplyr", "data.table", "lubridate")
lapply(.x, library, character.only=T)
### Main ------------------------------------------------------------------------------------------
dat.seq <- seq.Date(ymd_hms("2019-01-01 00:00:00"), ymd_hms("2019-12-31 23:00:00"), by = "hour")
### Main ------------------------------------------------------------------------------------------
dat.seq <- seq(ymd_hms("2019-01-01 00:00:00"), ymd_hms("2019-12-31 23:00:00"), by = "hour")
load.avg <- sample(1000:3000, 3)
load.avg <- sample(500:3000, 3)
circ.load.avg <- lapply(load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
substation.count <- 3
circuit.count <- 6
circ.load.avg <- lapply(load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
.5:4.5
seq(.5, 4.5, by=.5)
500:3000
seq(.5, 4.5, by=.5)
seq(.5, 4.5, by=.1)
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample((x-.25):(x+.25), circuit.count))
})
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample((x-.25):(x+.25), circuit.count))
})
seq((x-.25),(x+.25), .1)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
View(circ.sav.avg)
sin(0:24)
sin(((2*pi)/24)*(0:24))
dat.seq[1:50]
test <- data.table(hour = 0:23,
result = sin(((2*pi)/24)*(0:23)))
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line90
library(ggplot2)
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line90
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line()
test <- data.table(hour = 0:23,
result = cos(((2*pi)/24)*(0:23)))
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line()
test <- data.table(hour = 0:23,
result = sin(((2*pi)/24)*(0:23)+pi))
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line()
?rnorm
rnorm(5)
rnorm(10)
rnorm(100)
rnorm(sd =5)
rnorm(5, sd=5)
circ.load.avg[[x %% 3]]
circ.load.avg[[1 %% 3]]
1%% 3
1 %% 3
2 %% 3
3 %% 3
18 %% 3
17 %% 3
6 %% 6
5 %% 6
1 %% 6
2 %% 6
3 %% 6
4 %% 6
5 %% 6
6 %% 6
7\ %% 6
7 %% 6
perc <- sample(seq(.05,.25,.01), 1)
circ.load.avg[[2]][4]
x <- sub.dev.avg[[1]]
sub.dev.avg <- sample(seq(.05,.25,.01), substation.count)
x <- sub.dev.avg[[1]]
percs <- sample(seq((x-.05),(x+.05), .1), circuit.count)
seq((x-.05),(x+.05), .1)
seq((x-.05),(x+.05), .01)
percs <- sample(seq((x-.05),(x+.05), .01), circuit.count)
percs*circ.load.avg[[x]]
sub.dev.avg <- sample(seq(.05,.25,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.05),(x+.05), .01), circuit.count)
return(percs*circ.load.avg[[x]])
})
test <- data.table(hour = 0:46,
result = sin(((2*pi)/24)*(0:46)+pi))
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line()
circ.load.avg[[x]][y]
x <- 1
y <- 1
test <- data.table(hour = 0:8759,
result = sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y]))
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line()
test <- data.table(hour = 0:128,
result = sin(((2*pi)/24)*(0:128)+pi) + circ.load.avg[[x]][y] + rnorm(128, sd=circ.dev.avg[[x]][y]))
test <- data.table(hour = 0:128,
result = sin(((2*pi)/24)*(0:128)+pi) + circ.load.avg[[x]][y] + rnorm(129, sd=circ.dev.avg[[x]][y]))
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line()
test <- data.table(hour = 0:23,
result = sin(((2*pi)/24)*(0:23)+pi) + circ.load.avg[[x]][y] + rnorm(24, sd=circ.dev.avg[[x]][y]))
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line()
test <- data.table(hour = 0:23,
result = sin(((2*pi)/24)*(0:23)+pi) + circ.load.avg[[x]][y] + rnorm(24, sd=circ.dev.avg[[x]][y]))
circ.dev.avg[[x]][y]
rnorm(24, sd=circ.dev.avg[[x]][y]))
rnorm(24, sd=circ.dev.avg[[x]][y])
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
test <- data.table(hour = 0:23,
result = sin(((2*pi)/24)*(0:23)+pi) + circ.load.avg[[x]][y] + rnorm(24, sd=circ.dev.avg[[x]][y]))
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line()
circ.dev.avg[[x]][y]
sin(((2*pi)/24)*(0:23)+pi) + circ.load.avg[[x]][y]
test <- data.table(hour = 0:23,
result = sin(((2*pi)/24)*(0:23)+pi) + circ.load.avg[[x]][y] )
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line()
test <- data.table(hour = 0:23,
result = sin(((2*pi)/24)*(0:23)+pi) + circ.load.avg[[x]][y] + rnorm(24, sd=circ.dev.avg[[x]][y]))
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line()
test <- data.table(hour = 0:23,
result = 500*sin(((2*pi)/24)*(0:23)+pi) + circ.load.avg[[x]][y] + rnorm(24, sd=circ.dev.avg[[x]][y]))
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line()
test <- data.table(hour = 0:23,
result = circ.load.avg[[x]][y]*sin(((2*pi)/24)*(0:23)+pi) + circ.load.avg[[x]][y] + rnorm(24, sd=circ.dev.avg[[x]][y]))
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line()
test <- data.table(hour = 0:23,
result = (circ.load.avg[[x]][y]*.04)*sin(((2*pi)/24)*(0:23)+pi) + circ.load.avg[[x]][y] + rnorm(24, sd=circ.dev.avg[[x]][y]))
test <- data.table(hour = 0:23,
result = (circ.load.avg[[x]][y]*.4)*sin(((2*pi)/24)*(0:23)+pi) + circ.load.avg[[x]][y] + rnorm(24, sd=circ.dev.avg[[x]][y]))
ggplot(test, mapping=aes(x=hour,y=result)) + geom_point() + geom_line()
shiny::runApp('MV Software')
set.seed(42)
#'
#' Develops fake CVR data for input into CVR software
#'
### Libraries -------------------------------------------------------------------------------------
.x <- c("dplyr", "data.table", "lubridate", "ggplot2")
lapply(.x, library, character.only=T)
### Inputs ----------------------------------------------------------------------------------------
substation.count <- 3
circuit.count <- 6
set.seed(42)
### Main ------------------------------------------------------------------------------------------
dat.seq <- seq(ymd_hms("2019-01-01 00:00:00"), ymd_hms("2019-12-31 23:00:00"), by = "hour")
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
x <- 1
y <- 1
kwh.dat <- (circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y])
toplot <- kwh.dat[1:92]
toplot <- data.table(time = dat.seq[1:92],
kwh = kwh.dat[1:92])
ggplot(toplot, mapping=aes(x=time, y=kwh)) + geom_point() + geom_line()
kwh.dat <- .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y])
toplot <- data.table(time = dat.seq[1:92],
kwh = kwh.dat[1:92])
kwh.dat <- .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y])
ggplot(toplot, mapping=aes(x=time, y=kwh)) + geom_point() + geom_line()
set.seed(42)
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
set.seed(42)
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
set.seed(42)
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
dat <- data.table(timestamp = dat.seq,
kwh = .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y]))
dates <- unique(date(dat$timestamp))
1/7
1/7*365
random.days <- sample(1:7, 50)
random.days <- sample(7, 50)
?sample
random.days <- sample(1:7, 50, replace=T)
random.days
dat <- data.table(timestamp = dat.seq,
kwh = .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y])) %>%
mutate(week = week(timestamp))
head(dat)
table(dat$week)
wday(dat$timestamp[1])
?rnorm
volt <- rnorm(8760, mean = 120, sd = 3)
volt[1:10]
volt <- rnorm(8760, mean = 120, sd = 1)
volt[1:10]
volt <- rnorm(8760, mean = 120, sd = .5)
volt[1:10]
volt <- rnorm(8760, mean = 120, sd = .25)
volt[1:10]
circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
rnorm(1, sd=50)
z <- 1
dat <- data.table(timestamp = dat.seq,
kwh = .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y]),
volt = rnorm(8760, mean = 120, sd = .25)) %>%
mutate(week = week(timestamp),
date = date(timestamp)) %>%
split(.$week)
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + rnorm(1, sd=30))))
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + rnorm(1, sd=30)), kwh))
View(rez)
ggplot(rez[1:92,], mapping=aes(x=timestamp,y=kwh)) + geom_point() + geom_line()
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh.n = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + rnorm(1, sd=30)), kwh))
rez$test <- rez$kwh - rez$kwh.n
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh.n = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] +
rnorm(8760, sd=.1*(circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]))), kwh))
adj <- rnorm(8760, sd=.1*(circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y])))
adj <- rnorm(8760, sd=.1*(circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]))
adj{1:50}
adj[1:50]
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh.n = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + adj, kwh))
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh.n = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + adj[nrow(.)], kwh))
})
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh.n = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + adj[nrow(.)]), kwh))
rez$test <- rez$kwh - rez$kwh.n
sample(adj, 1)
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh.n = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + sample(adj, 1)), kwh))
rez$test <- rez$kwh - rez$kwh.n
m <- as.factor(rez$mode)
adj <- rnorm(8760, sd=.1*(circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]))
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]), kwh))
xloc <- which(rez$mode=="ON")
adj[xloc] <- 0
adj
dat <- data.table(timestamp = dat.seq,
kwh = .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y]),
volt = rnorm(8760, mean = 120, sd = .25)) %>%
mutate(week = week(timestamp),
date = date(timestamp)) %>%
split(.$week)
dat <- lapply(1:length(random.days), function(z) {
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]), kwh)) %>%
return()
})
random.days <- sample(7, 52)
random.days <- sample(7, 52, replace=T)
dat <- data.table(timestamp = dat.seq,
kwh = .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y]),
volt = rnorm(8760, mean = 120, sd = .25)) %>%
mutate(week = week(timestamp),
date = date(timestamp)) %>%
split(.$week)
dat <- lapply(1:length(random.days), function(z) {
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]), kwh)) %>%
return()
}) %>% rbindlist()
random.days <- sample(7, 53, replace=T)
dat <- data.table(timestamp = dat.seq,
kwh = .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y]),
volt = rnorm(8760, mean = 120, sd = .25)) %>%
mutate(week = week(timestamp),
date = date(timestamp)) %>%
split(.$week)
dat <- lapply(1:length(random.days), function(z) {
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]), kwh)) %>%
return()
}) %>% rbindlist()
adj <- rnorm(8760, sd=.1*(circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]))
xloc <- which(rez$mode=="ON")
xloc <- which(dat$mode=="ON")
adj[xloc] <- 0
adj
rnorm(8760, sd=.1*(120))
rnorm(8760, sd=.05*(120))
rnorm(8760, sd=.01*(120)
rnorm(8760, sd=.01*(120))
volt.adj <- rnorm(8760, sd=.01*(120))
volt.adj[1]
volt.adj[2]
volt.adj[3]
volt.adj[1:10]
.01*120
volt.adj <- rnorm(8760, sd=1)
volt.adj[1:50]
source('~/MV Software/Develop Proxy CVR Data.R', echo=TRUE)
source('~/MV Software/Develop Proxy CVR Data.R', echo=TRUE)
source('~/MV Software/Develop Proxy CVR Data.R', echo=TRUE)
View(circ.data)
source('~/MV Software/Develop Proxy CVR Data.R', echo=TRUE)
saveRDS(circ.data, "./ProxyCVRData.rds")
runApp('MV Software')
fwrite(circ.data, "./ProxyCVRData.csv")
runApp('MV Software')
runApp('MV Software')
runApp('MV Software')
runApp('MV Software')
library(devtools)
?devtools
?usethis
devtools::install_github("r-lib/rlang", build_vignettes = T)
verison
version
knitr::opts_chunk$set(echo = TRUE)
setwd("~/1) Projects/Political-Volunteer-Analysis/")
survey <- fread("./pfa_digitalanalyticstest (2).csv")
.x <- c('dplyr', 'lubridate', 'data.table', 'ggplot2',
'broom', 'tidyr', 'devtools', 'glmnet')
lapply(.x, library, character.only=T)
devtools::install_github("dtkaplan/statisticalModeling")
library(statisticalModeling)
options(scipen=999)
setwd("~/1) Projects/Political-Volunteer-Analysis/")
options(scipen=999)
survey <- fread("./pfa_digitalanalyticstest (2).csv")
setwd("~/1) Projects/Political-Volunteer-Analysis/")
survey <- fread("./pfa_digitalanalyticstest (2).csv")
test <- read.delim("./NOBLE.txt")
View(test)
test <- read.csv("./NOBLE.txt")
